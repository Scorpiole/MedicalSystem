# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'child_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# 新加入的包
from PyQt5.QtWidgets import *
from pathlib import Path
from PyQt5.QtCore import *

class Ui_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(581, 381)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(52, 130, 147, 18))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(290, 130, 241, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(52, 190, 119, 18))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(290, 190, 241, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(210, 130, 75, 21))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(210, 190, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 260, 121, 51))
        self.pushButton_3.setObjectName("pushButton_3")

        self.retranslateUi(Form)

        #  新加入的代码
        self.setWindowModality(Qt.ApplicationModal)
        self.pushButton.clicked.connect(self.set_excel_path)
        self.pushButton_2.clicked.connect(self.set_local_path)
        self.excel_path = ''
        self.local_path = ''
        # -------------------------------
        # 测试用代码
        # self.lineEdit.setText('F:/桌面软件/学习/课设4/课程设计检验数据.xlsx')
        # self.lineEdit_2.setText('F:/桌面软件/学习/课设4/课程设计训练集影像')
        # self.excel_path = self.lineEdit.text()
        # self.local_path = self.lineEdit_2.text()
        # -------------------------------

        self.pushButton_3.clicked.connect(Form.close) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">信息表Excel路径：</span></p></body></html>"))
        self.label_2.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">影像资料路径：</span></p></body></html>"))
        self.pushButton.setText(_translate("Form", "添加路径"))
        self.pushButton_2.setText(_translate("Form", "添加路径"))
        self.pushButton_3.setText(_translate("Form", "确定"))

# 新加入的函数
    def set_excel_path(self):
        fname, _ = QFileDialog.getOpenFileName(self, '打开文件夹', '.', 'Excel文件 (*.xlsx)')
        excel_file = Path(fname)
        if excel_file.is_file():
            self.excel_path = fname
            self.lineEdit.setText(fname)
            if self.lineEdit.text():
                QMessageBox.about(self, 'Message', '\t设置成功！\t\t')
        else:
            # QMessageBox.warning(self, 'Warning', '输入路径有误，请重新输入！', QMessageBox.Yes)

            pass

    def set_local_path(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", "C:/")
        local_dir = Path(directory)
        if local_dir.is_dir():
            self.local_path = directory
            self.lineEdit_2.setText(directory)
            if self.lineEdit_2.text():
                QMessageBox.about(self, 'Message', '\t设置成功！\t\t')
        else:
            # QMessageBox.warning(self, 'Warning', '输入路径为空！', QMessageBox.Yes)
            pass

    # 退出时给予主窗口一个信号
    my_Signal = QtCore.pyqtSignal(str)

    def sendEditContent(self):
        content = '1'
        self.my_Signal.emit(content)

    def closeEvent(self, event):
        self.sendEditContent()
    # ---------------------
